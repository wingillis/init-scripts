#!/bin/bash

mem=""
queue="interactive"
transfer=""
debug=""
procs="2"
com="bash"
wall="12:00"
output=""
disphelp=""
thehelp="
wsub Help - options that you can pass:
-m: option - memory
-i: flag - set queue to interactive (default)
-w: option - wall time
-n: option - num procs
-o: option - specify output file
-d: flag - set debug true to print command
-s: flag - set queue to short
-p: flag - set queue to priority
-c: option - code to run on bsub - don't forget quotes when using spaces!!! - default is bash
-t: flag - adds transfer node
-q: option - specify which queue you want to run in
-h: flag - print help (this)

example:
	wsub -t -n 2 -m 3
"

while getopts "w:n:sc:m:idq:to:hp" flag; do
    case "${flag}" in 
        m) mem="$(echo "${OPTARG} * 1000" | bc -l )" ;; # how much memory in gb
        i) queue="interactive" ;;
        w) wall="${OPTARG}" ;;
        n) procs="${OPTARG}" ;;
        d) debug=true ;;
        o) output="${OPTARG}" ;; # an output file
        s) queue="short" ;;
        p) queue="priority" ;;
        c) com="${OPTARG}" ;; # the command to send to 
        t) transfer=true ;;
        q) queue="${OPTARG}" ;;
	h) disphelp=true ;;
        *) echo "not a valid arg" ;;
    esac
done

if [ $disphelp ]
then
	echo "${thehelp}"
	exit 0
fi

BSUB_COMMAND="bsub -n ${procs} -q ${queue}"

if [ $transfer ]
then
    BSUB_COMMAND="$BSUB_COMMAND -R \"select[transfer]\""
fi

if [ $mem ]
then
    BSUB_COMMAND="${BSUB_COMMAND} -R \"rusage[mem=${mem}]\""
fi

if [ $wall ]
then
    BSUB_COMMAND="${BSUB_COMMAND} -W $wall"
fi

if [ $output ]
then
  BSUB_COMMAND="${BSUB_COMMAND} -N -o ${output}"
fi

# add the command to the end of the bsub string
BSUB_COMMAND="${BSUB_COMMAND} \"${com}\""

if [ $debug ]
then
    echo "${BSUB_COMMAND}"
else
    eval ${BSUB_COMMAND}
fi
